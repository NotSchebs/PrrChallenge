data <- read.csv('Schweizer_superLeague_Data - Kopie.csv')
DF <- data
# Goals-Spalte in "For" (geschossen) und "Against" (erhalten) aufteilen
data <- data %>%
separate(Goals, into = c("Goals_scored", "Goals_conceded"), sep = " : ")
# Gewinnrate hinzufügen
data$Win_Rate <- data$W / data$Pl * 100
# Goals_For und Goals_Against in numerische Werte umwandeln
data$Goals_scored <- as.numeric(data$Goals_scored)
data$Goals_conceded <- as.numeric(data$Goals_conceded)
# DataFrame erneut anzeigen
#head(data)
data <- data %>%
group_by(Season) %>%
mutate(Durchschnittsmarktwert = mean(Marktwert_in_Mio_Euro, na.rm = TRUE))
data <- data %>%
mutate(Gewinnverhaeltnis = W / Pl *100)
# Visualisierung der Entwicklung des durchschnittlichen Marktwerts
# Modify the Season column to keep only the last 5 characters (e.g., 2004/05 -> 04/05)
# Plot the modified data
ggplot(data, aes(x = sub("^.*(\\d{2}/\\d{2})$", "\\1", data$Season), y = Durchschnittsmarktwert, group = 1)) +
geom_line(color = "steelblue", size = 1) +
geom_point(color = "firebrick", size = 2) +
labs(
title = "Entwicklung des durchschnittlichen Marktwerts pro Saison",
x = "Saison",
y = "Durchschnittlicher Marktwert (in Mio Euro)"
) +
theme_minimal()
Top_func <- function(rank){       # erstellung einer Funktion um Mannschafften mit dem top-n-Martkwert zu finden und in einem neuen dataframe zu setzen
data %>%
group_by(Season) %>%
slice_max(order_by = Marktwert_in_Mio_Euro, n = rank)
}
Top3_Marktwert_Teams <- Top_func(3)
#Top3_Marktwert_Teams: In einer neuen Spalte im Dataframe wird überprüft ob das Team in den Top 3 war oder nicht. Dies wird mit `TRUE` oder `FALSE` angegeben.
The_Top <- function(top_teams, rank){   #funkton um neue zeile im neuen dataframe zu erstellen
top_teams %>% mutate(was_Top=ifelse(Rank <= rank,TRUE, FALSE))
}
Top3_Marktwert_Teams <- The_Top(Top3_Marktwert_Teams, 3)
#Top3_Marktwert_Teams
count_top <- function(marktwert){
marktwert %>% group_by(was_Top) %>% count()
}
count_Top3<- count_top(Top3_Marktwert_Teams)
#count_Top3
verhältnis_plot <- function(count, a, TL){
# Berechne Prozentsatz und konvertiere die Daten
count <- count %>%
mutate(percent = n / sum(count$n) * 100,  # Prozentsatz berechnen
label = paste0(round(percent, 1), "%"))  # Label für die Legende erstellen
# Erstelle den Plot
ggplot(count, aes(x = "", y = percent, fill = as.factor(was_Top))) +  # "was_Top" als Faktor
geom_bar(stat = "identity", position = "stack") +  # Gestapeltes Balkendiagramm
labs(
title = paste("Verhältnis: Mannschaften mit ", TL, a, "Marktwerten in die Top", a),
x = NULL,
y = "Prozentsatz",
fill = "Legende"  # Legendentitel anpassen
) +
scale_fill_manual(
values = c("TRUE" = "steelblue", "FALSE" = "firebrick"),
labels = c(
paste("Nicht in den Top", a, "(", count$label[count$was_Top == FALSE], ")"),
paste("In den Top", a, "(", count$label[count$was_Top == TRUE], ")")
)
) +
theme_minimal(base_size = 12) +
theme(
plot.title = element_text(face = "bold", size = 14),
legend.position = "right",  # Legende rechts anzeigen
axis.text.x = element_blank(),  # Entfernt den x-Achsentext
axis.ticks.x = element_blank()  # Entfernt x-Achsenticks
)
}
verhältnis_plot(count_Top3, 3, "Top")
verteilung_plot <- function(marktwert, a) {
# Berechne den durchschnittlichen Marktwert pro Saison und füge dies dem ursprünglichen Dataframe hinzu
marktwert <- marktwert %>%
group_by(Season) %>%
mutate(Durchschnittsmarktwert_Saison = mean(Marktwert_in_Mio_Euro, na.rm = TRUE),
Marktwert_zum_Durchschnitt = Marktwert_in_Mio_Euro / Durchschnittsmarktwert_Saison)
ggplot(marktwert, aes(x = Marktwert_zum_Durchschnitt, fill = as.factor(was_Top))) +
geom_histogram(position = "stack", bins = 20) +
labs(
title = paste("Verteilung der Marktwerte im Verhältnis zum Durchschnitt für Teams in den Top", a),
x = "Relativität von Marktwert zu Durchschnittsmarktwert pro saison",
y = "Häufigkeit",
fill = paste("In den Top ", a)
) +
scale_fill_manual(
values = c("TRUE" = "steelblue", "FALSE" = "firebrick"),
labels = c(
paste("Nicht in den Top", a),
paste("In den Top", a)
)
) +
theme_minimal()
}
# Beispiel-Aufruf der Funktion
verteilung_plot(Top3_Marktwert_Teams, 3)
modl <- function(marktwert){
glm(was_Top ~ log(Marktwert_in_Mio_Euro) + Gewinnverhaeltnis + GD + Durchschnittsmarktwert,
data = marktwert, family = binomial)
}
model <- modl(Top3_Marktwert_Teams)
summary(model)
sim_val <- function(marktwert){
rlnorm(1000, meanlog = log(mean(marktwert$Marktwert_in_Mio_Euro)),
sdlog = sd(log(marktwert$Marktwert_in_Mio_Euro)))
}
simulated_values <- sim_val(Top3_Marktwert_Teams)
#simulated_values
sim_res <- function(mdl, sim, marktwert){
# Simuliere das Gewinnverhältnis (W / PL)
Gewinnverhaeltnis_sim <- sample(marktwert$Gewinnverhaeltnis, size = 1000, replace = TRUE)  # Zufällige Werte für das Gewinnverhältnis
# Simuliere andere Variablen
GD_sim <- sample(marktwert$GD, size = 1000, replace = TRUE)   # Zufällige Werte für GD
Durchschnittsmarktwert_sim <- sample(marktwert$Durchschnittsmarktwert, size = 1000, replace = TRUE)   # Zufällige Werte für Durchschnittsmarktwert
# Berechne das Marktwert / Durchschnittsmarktwert Verhältnis
Marktwert_zum_Durchschnitt <- sim / Durchschnittsmarktwert_sim
# Erstelle newdata mit allen benötigten Variablen
newdata <- data.frame(
Marktwert_in_Mio_Euro = sim,
Gewinnverhaeltnis = Gewinnverhaeltnis_sim,
GD = GD_sim,
Durchschnittsmarktwert = Durchschnittsmarktwert_sim,
Marktwert_zum_Durchschnitt = Marktwert_zum_Durchschnitt
)
# Berechne die Top-3-Wahrscheinlichkeiten
probabilities <- predict(mdl, newdata = newdata, type = "response")
# Erstelle das Ergebnis-DataFrame
res <- data.frame(
Marktwert = sim,
Gewinnverhaeltnis = Gewinnverhaeltnis_sim,
GD = GD_sim,
Durchschnittsmarktwert = Durchschnittsmarktwert_sim,
Marktwert_zum_Durchschnitt = Marktwert_zum_Durchschnitt,
Probability_Top3 = probabilities,
Top = rbinom(1000, 1, probabilities) # Simuliere Top-3-Ergebnis
)
return(res)
}
# Ergebnisse simulieren
simulated_results <- sim_res(model, simulated_values, Top3_Marktwert_Teams)
# Ergebnisse anzeigen
# head(simulated_results)
#simulated_results
sim_plot <- function(simres, a){
# Stellen Sie sicher, dass 'Top' als Faktor behandelt wird
simres$Top <- factor(simres$Top, levels = c(0, 1))
# ggplot mit der Anpassung der Farben und der Legende
ggplot(simres, aes(x = (Marktwert_zum_Durchschnitt), fill = Top)) +
geom_histogram(position = "stack", bins = 30) +
labs(title = "Simulation zukünftiger Saisons",
x = "Relativität von Marktwert zu Durchschnittsmarktwert pro Saison",
y = "Häufigkeit",
fill = paste("Top ", a, " Status")) +
scale_fill_manual(
values = c("0" = "firebrick", "1" = "steelblue"),  # Zuordnung von rot für "Nicht in den Top 3" und blau für "In den Top 3"
labels = c(paste("Nicht in den Top ", a), paste("In den Top ", a))
)
}
# Visualisierung der simulierten Ergebnisse
sim_plot(simulated_results, 3)
Top5_Marktwert_Teams <- Top_func(5)
#Top5_Marktwert_Teams
Top5_Marktwert_Teams <- The_Top(Top5_Marktwert_Teams, 5)
#Top5_Marktwert_Teams
count_Top5<- count_top(Top5_Marktwert_Teams)
#count_Top5
verhältnis_plot(count_Top5,5,"Top")
verteilung_plot(Top5_Marktwert_Teams,5)
#Logistische Regression
model5 <- modl(Top5_Marktwert_Teams)
summary(model5)
#Simulierte Marktwerte
simulated_values5 <- sim_val(Top5_Marktwert_Teams)
#Top-5-Wahrscheinlichkeit anwenden
simulated_results5 <- sim_res(model5,simulated_values5,Top5_Marktwert_Teams)
#Visualisierung der Simulationsergebnisse
sim_plot(simulated_results5, 5)
lowest <- function(a){
data %>%
group_by(Season) %>%
slice_min(order_by = Marktwert_in_Mio_Euro, n = a)
}
lowest5_income_Team <- lowest(5)
#lowest5_income_Team
lowest5_income_Team <- The_Top(lowest5_income_Team, 5)
#lowest5_income_Team
count_low5_Top5<- count_top(lowest5_income_Team)
#count_low5_Top5
verhältnis_plot(count_low5_Top5,5,"den tiefsten")
verteilung_plot(lowest5_income_Team,5)
#Wahrscheinlichkeitsberechnung und Visualisierung
model5_low5 <- modl(lowest5_income_Team)
model5_low5
#Simulation und Visualisierung
simulated_values5_low5 <- sim_val(lowest5_income_Team)
simulated_results5_low5 <- sim_res(model5_low5,simulated_values5_low5,lowest5_income_Team)
sim_plot(simulated_results5_low5, 5)
# Berechnung der Relation
relation <- cor(data$Rank, data$GD, use = "complete.obs")
print(paste("Relation zwischen Platzierung und Tordifferenz:", round(relation, 2)))
# Lineares Modell
model <- lm(GD ~ Rank, data = data)
summary(model)
# Die Steigung der Regressionsgerade (als Relation) anzeigen
relation <- coef(model)["Rank"]
print(paste("Regressionskoeffizient (Steigung) zwischen Platzierung und Tordifferenz:", round(relation, 2)))
# Streudiagramm mit Regressionsgerade
ggplot(data, aes(x = Rank, y = GD)) +
geom_point(color = "steelblue", size = 3) +                 # Punkte darstellen
geom_smooth(method = "lm", se = TRUE, color = "firebrick",   # Regressionsgerade mit Konfidenzintervall
formula = y ~ x) +
scale_x_continuous(limits = c(1, max(data$Rank)),      # X-Achse von 1 bis max(Rank)
breaks = 1:max(data$Rank)) +       # Achsenticks bei ganzen Zahlen
labs(title = "Regressionsmodell: Platzierung vs. Tordifferenz",
x = "Platzierung",
y = "Tordifferenz") +
theme_minimal()
# Berechnung der Relation
relation <- cor(data$Rank, data$Goals_scored, use = "complete.obs")
print(paste("Relation zwischen Platzierung und erziehlte Tore:", round(relation, 2)))
# Lineares Modell
model <- lm(Goals_scored ~ Rank, data = data)
summary(model)
# Die Steigung der Regressionsgerade (als Relation) anzeigen
relation <- coef(model)["Rank"]
print(paste("Regressionskoeffizient (Steigung) zwischen Platzierung und erziehlte Tore:", round(relation, 2)))
# Streudiagramm mit Regressionsgerade
ggplot(data, aes(x = Rank, y = Goals_scored)) +
geom_point(color = "steelblue", size = 3) +                 # Punkte darstellen
geom_smooth(method = "lm", se = TRUE, color = "firebrick",   # Regressionsgerade mit Konfidenzintervall
formula = y ~ x) +
scale_x_continuous(limits = c(1, max(data$Rank)),      # X-Achse von 1 bis max(Rank)
breaks = 1:max(data$Rank)) +       # Achsenticks bei ganzen Zahlen
labs(title = "Regressionsmodell: Platzierung vs. erziehlte Tore",
x = "Platzierung",
y = "erziehlte Tore") +
theme_minimal()
# Berechnung der Relation
relation <- cor(data$Rank, data$Goals_conceded, use = "complete.obs")
print(paste("Relation zwischen Platzierung und erhaltene Tore:", round(relation, 2)))
# Lineares Modell
model <- lm(Goals_conceded ~ Rank, data = data)
summary(model)
# Die Steigung der Regressionsgerade (als Relation) anzeigen
relation <- coef(model)["Rank"]
print(paste("Regressionskoeffizient (Steigung) zwischen Platzierung und erhaltene Tore:", round(relation, 2)))
# Streudiagramm mit Regressionsgerade
ggplot(data, aes(x = Rank, y = Goals_conceded)) +
geom_point(color = "steelblue", size = 3) +                 # Punkte darstellen
geom_smooth(method = "lm", se = TRUE, color = "firebrick",   # Regressionsgerade mit Konfidenzintervall
formula = y ~ x) +
scale_x_continuous(limits = c(1, max(data$Rank)),      # X-Achse von 1 bis max(Rank)
breaks = 1:max(data$Rank)) +       # Achsenticks bei ganzen Zahlen
labs(title = "Regressionsmodell: Platzierung vs. erhaltene Tore",
x = "Platzierung",
y = "erhaltene Tore") +
theme_minimal()
data1 <- data %>%
mutate(Season = as.numeric(sub("/.*", "", Season))) # Jahr vor dem '/' extrahieren und numerisch machen
# Datenvorbereitung: Nur relevante Spalten auswählen und sicherstellen, dass 'Season' numerisch ist
data_top3 <- data1 %>%
select(Season, Rank, Club) %>%
filter(Rank %in% 1:3) %>%          # Nur Top 3 Clubs der jeweiligen Saison auswählen
mutate(Season = as.numeric(Season)) %>%  # Sicherstellen, dass 'Season' numerisch ist
arrange(Club, Season)             # Nach Club und Saison sortieren, um den Verlauf pro Club zu analysieren
# Berechnung: Überprüfen, ob ein Club im nächsten Jahr wieder in den Top 3 ist
data_top3 <- data_top3 %>%
group_by(Club) %>%
mutate(Next_season = lead(Season),                # Nächste Saison des Clubs
Is_consecutive = ifelse(Next_season == Season + 1, 1, 0), # Prüfen, ob aufeinanderfolgende Jahre
Next_season_top3 = ifelse(Is_consecutive == 1, lead(Club), NA), # Nur aufeinanderfolgende Saisons prüfen
Repeated_top3 = ifelse(Club == Next_season_top3, 1, 0)) %>% # Nur für Folgejahre vergleichen
ungroup()
# Wahrscheinlichkeit berechnen
prob_repeated <- sum(data_top3$Repeated_top3, na.rm = TRUE) / nrow(data_top3)
# Ausgabe der Wahrscheinlichkeit
#cat("Wahrscheinlichkeit, dass ein Club, der in einer Saison in den Top 3 ist, dies auch in der nächsten Saison schafft:",
#    round(prob_repeated * 100, 2), "%\n")
# Diagramm erstellen
ggplot(data_top3, aes(x = Season, y = Repeated_top3)) +
geom_col(fill = "steelblue") +
labs(title = "Wiederholung der Meistertitel in der folgenden Saison",
x = "Saison",
y = "Wiederholung (1 = Ja, 0 = Nein)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Daten für Visualisierung vorbereiten
probabilities <- data.frame(
Category = c("Wiederholt", "Nicht wiederholt"),
Probability = c(prob_repeated * 100, 100 - prob_repeated * 100)
)
# Torten- oder Balkendiagramm erstellen
ggplot(probabilities, aes(x = "", y = Probability, fill = Category)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar(theta = "y") + # Für ein Tortendiagramm
geom_text(aes(label = paste0(round(Probability, 1), "%")),
position = position_stack(vjust = 0.5), size = 5) +
scale_fill_manual(values = c("Wiederholt" = "steelblue", "Nicht wiederholt" = "firebrick")) +
labs(
title = "Wahrscheinlichkeit für aufeinanderfolgende Top-3-Platzierungen",
x = NULL,
y = NULL
) +
theme_void() +
theme(legend.title = element_blank())
# Datenvorbereitung: Nur relevante Spalten auswählen und sortieren
data <- DF
data_DW <- data %>%
arrange(Season) %>%
filter(Rank == 1) %>%          # Nur Meister der jeweiligen Saison auswählen
mutate(Next_Champion = lead(Club),                 # Nächster Meister pro Saison
Repeated = ifelse(Club == Next_Champion, 1, 0))    # Meistertitel wiederholt?
# Summierung der Wiederholungen und Nicht-Wiederholungen
repeat_summary <- data_DW %>%
summarise(Titel_verteidigt = sum(Repeated, na.rm = TRUE),
Titel_nicht_verteidigt = sum(1 - Repeated, na.rm = TRUE)) %>%
pivot_longer(cols = everything(),
names_to = "Status",
values_to = "Anzahl") %>%
mutate(Prozent = round((Anzahl / sum(Anzahl)) * 100, 2))
# Diagramm erstellen
ggplot(repeat_summary, aes(x = "", y = Prozent, fill = Status)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
geom_text(aes(label = paste0(Prozent, "%")), position = position_stack(vjust = 0.5), size = 5) +
scale_fill_manual(values = c("firebrick", "steelblue")) +  # Farben festlegen
labs(
title = "Wahrscheinlichkeit einer Titelverteidigung",
x = NULL,
y = NULL
) +
theme_minimal() +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank(),
plot.title = element_text(hjust = 0.5, size = 16)
)
# Datenvorbereitung: Nur relevante Spalten auswählen
data_WW <- data %>%
select(Season, Rank, Club) %>%
filter(Rank == 1) %>%          # Nur Meister der jeweiligen Saison auswählen
arrange(Season)
# Berechnung: Überprüfen, ob der Club im nächsten Jahr wieder Meister wird
data_WW <- data_WW %>%
mutate(Next_Champion = lead(Club),               # Nächster Meister pro Saison
Repeated_Champion = ifelse(Club == Next_Champion, 1, 0))  # Meistertitel wiederholt?
# Wahrscheinlichkeit berechnen
prob_repeated <- sum(data_WW$Repeated_Champion, na.rm = TRUE) / (nrow(data_WW) - 1) # -1 wegen letzter Saison ohne Vergleich
# Nur die Zeilen mit Rank == 1 (Meisterteams) filtern
meister_teams <- data_WW[data_WW$Rank == 1, ]
# Häufigkeit der Meistertitel pro Team berechnen
meister_count <- table(meister_teams$Club)
# Anzeigen der Häufigkeit der Meistertitel
meister_count
# Datenvorbereitung: Nur relevante Spalten auswählen
data_WW <- data_WW %>%
select(Season, Rank, Club) %>%
filter(Rank == 1) %>%
arrange(Season)
# Berechnung: Überprüfen, ob der Club im Vorjahr Meister war
data_WW <- data_WW %>%
mutate(Previous_Champion = lag(Club),               # Meister der vorherigen Saison
Repeated_Champion = ifelse(Club == Previous_Champion, 1, 0))  # Meistertitel wiederholt?
# Wahrscheinlichkeit berechnen
prob_repeated <- sum(data_WW$Repeated_Champion, na.rm = TRUE) / (nrow(data_WW) - 1)
# Ausgabe der Wahrscheinlichkeit
cat("Wahrscheinlichkeit, dass ein Meister im Folgejahr erneut Meister wird:", round(prob_repeated * 100, 2), "%\n")
# Diagramm erstellen mit farbigen Balken pro Club
ggplot(data_WW, aes(x = Season, y = Repeated_Champion, fill = Club)) +
geom_col() +
labs(title = "Wiederholung der Meistertitel in der jeweiligen Saison",
x = "Saison",
y = "Wiederholung (1 = Ja, 0 = Nein)",
fill = "Club") +   # Legende für Clubs hinzufügen
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_fill_brewer(palette = "Set2")   # Farbpalette verwenden
# Datenvorbereitung: Nur relevante Spalten auswählen und sortieren
data_WW <- data_WW %>%
filter(Rank == 1) %>%          # Nur Meister der jeweiligen Saison auswählen
arrange(Season) %>%
mutate(Next_Champion = lead(Club),
Repeated = ifelse(Club == Next_Champion, 1, 0))  # Meistertitel wiederholt?
# Filtern der verteidigten Titel und Gruppierung nach Verein
repeat_club_summary <- data_WW %>%
filter(Repeated == 1) %>%
group_by(Club) %>%
summarise(Anzahl = n()) %>%
mutate(Prozent = round((Anzahl / meister_count) * 100, 1))  #sum(Anzahl)
# Diagramm erstellen mit erweiterter y-Achse und angepassten Beschriftungen
ggplot(repeat_club_summary, aes(x = reorder(Club, -Anzahl), y = Prozent, fill = Club)) +
geom_bar(stat = "identity", width = 0.7) +
geom_text(aes(label = paste0(Prozent, "%")),
vjust = -0.3,    # Vertikale Position der Beschriftung leicht nach oben versetzen
size = 5) +
scale_y_continuous(limits = c(0, max(repeat_club_summary$Prozent) + 5)) +  # Y-Achse erweitern
scale_fill_brewer(palette = "Paired") +
labs(title = "Titelverteidigungen nach Vereinen",
x = "Verein",
y = "Anteil der Titelverteidigungen (%)",
fill = "Verein") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
axis.title = element_text(size = 14),
plot.title = element_text(hjust = 0.5))
# Korrelation zwischen Variablen (z. B. Marktwert, Tore, Punkte)
correlation_matrix <- data %>%
select(Pts, Marktwert_in_Mio_Euro, GD, Pl) %>%
cor()
correlation_matrix
# Visualisierung: Marktwert vs. Punkte
plot <- ggplot(data, aes(x = Marktwert_in_Mio_Euro, y = Pts, color = Club)) +
geom_point(size = 3) +
theme_minimal() +
labs(
title = "Marktwert vs. Punkte",
x = "Marktwert (in Millionen)",
y = "Punkte"
) +
theme(
plot.title = element_text(hjust = 0.5),  # Titel zentrieren
plot.margin = unit(c(1, 1, 2, 1), "cm"), # Platz am unteren Rand vergrößern
axis.text.x = element_text(angle = 45, hjust = 1)  # Achsentext lesbarer machen
)
# Plot anzeigen
print(plot)
# Plot speichern
#ggsave("plot.png", plot = plot, width = 8, height = 6)
# Vorbereitung der Daten
set.seed(42)
train_index <- createDataPartition(data$Pts, p = 0.8, list = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# Random Forest Modell (Vorhersage von Punkten)
model <- randomForest(Pts ~ Marktwert_in_Mio_Euro + GD + Pl,
data = train_data, ntree = 500, importance = TRUE)
# Modellzusammenfassung
print(model)
varImpPlot(model)
# Testdaten auswerten
predictions <- predict(model, test_data)
MAE <- mean(abs(predictions - test_data$Pts))
cat("Mean Absolute Error (MAE):", MAE)
# Szenarien definieren: Optimistisch, Konservativ, Pessimistisch
simulate_scenario <- function(data, scenario, season_factor) {
adjusted_data <- data
# Anpassung der Marktwerte basierend auf dem Szenario
if (scenario == "optimistic") {
adjusted_data$Marktwert_in_Mio_Euro <- adjusted_data$Marktwert_in_Mio_Euro * (1.3 + season_factor)
} else if (scenario == "pessimistic") {
adjusted_data$Marktwert_in_Mio_Euro <- adjusted_data$Marktwert_in_Mio_Euro * (0.7 + season_factor)
} else {
adjusted_data$Marktwert_in_Mio_Euro <- adjusted_data$Marktwert_in_Mio_Euro * (1.0 + season_factor)
}
# Vorhersagen generieren
adjusted_data$predicted_Pts <- predict(model, adjusted_data)
# Spiele simulieren: Teams haben immer 38 Spiele
adjusted_data <- adjusted_data %>%
mutate(Pl = 38,  # Anzahl der Spiele setzen
predicted_Pts = round(predicted_Pts + rnorm(n(), mean = 0, sd = 5)),  # Zufällige Schwankung
predicted_Pts = ifelse(predicted_Pts < 0, 0, predicted_Pts))  # Negative Punkte vermeiden
# Rangliste erstellen
adjusted_data <- adjusted_data %>%
arrange(desc(predicted_Pts)) %>%
distinct(Club, .keep_all = TRUE) %>%  # Jedes Team nur einmal
slice(1:12) %>%  # Nur die Top 12 Teams
mutate(Rank = row_number())  # Rang zuweisen
return(adjusted_data)
}
# Simulation für mehrere Saisons
simulate_seasons <- function(data, years, scenario) {
seasons <- list()
for (year_index in seq_along(years)) {
year <- years[year_index]
# Saison-spezifischer Faktor (leicht unterschiedliche Bedingungen pro Saison)
season_factor <- runif(1, -0.5, 0.5)
# Saison simulieren
season_data <- simulate_scenario(data, scenario, season_factor)
season_data <- season_data %>%
mutate(Season = year)  # Saison hinzufügen
seasons[[as.character(year)]] <- season_data
}
# Ergebnisse zusammenführen
return(bind_rows(seasons))
}
# Definition der zukünftigen Saisons
future_years <- c("2024/25", "2025/26", "2026/27")
# Simulation ausführen
future_optimistic <- simulate_seasons(data, future_years, "optimistic")
future_conservative <- simulate_seasons(data, future_years, "conservative")
future_pessimistic <- simulate_seasons(data, future_years, "pessimistic")
# Ergebnisse anzeigen
future_optimistic
future_conservative
future_pessimistic
# Tabellenpositionen visualisieren
plot_simulation <- function(simulated_data, title) {
ggplot(simulated_data, aes(x = reorder(Club, -predicted_Pts), y = predicted_Pts, fill = Season)) +
geom_bar(stat = "identity", position = position_dodge()) +
coord_flip() +
theme_minimal() +
labs(title = title, x = "Club", y = "Punkte")
}
plot_simulation(future_optimistic, "Optimistisches Szenario")
plot_simulation(future_conservative, "Konservatives Szenario")
plot_simulation(future_pessimistic, "Pessimistisches Szenario")
